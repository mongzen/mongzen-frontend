name: Deploy Next.js to Vercel

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    name: 🔍 Lint and Test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npm run format:check

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

      - name: Set status check for PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              context: 'ci/lint-and-test',
              description: 'All checks passed'
            });

  deploy-preview:
    needs: lint-and-test
    runs-on: ubuntu-latest
    name: 🚀 Deploy Preview
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: Comment PR with preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 **Preview deployment ready!**\n\n✅ Preview URL: ${{ steps.deploy.outputs.deployment_url }}\n\nThis preview will update automatically when you push new commits to this PR.'
            })

  deploy-production:
    needs: lint-and-test
    runs-on: ubuntu-latest
    name: 🚀 Deploy Production
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Generate Version Number
        id: version
        run: |
          # Get the current date and time
          DATE=$(date +"%Y%m%d")
          TIME=$(date +"%H%M")

          # Get latest release version from GitHub API
          LATEST_VERSION=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.tag_name // "v0.0.0"' | sed 's/^v//')

          # Parse semantic version (MAJOR.MINOR.PATCH)
          if [[ "$LATEST_VERSION" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
          else
            MAJOR=1
            MINOR=0
            PATCH=0
          fi

          # Check commit messages for version bump instructions
          COMMIT_MSG="${{ github.event.head_commit.message }}"

          if [[ "$COMMIT_MSG" =~ \[major\]|\[breaking\]|BREAKING\ CHANGE ]]; then
            echo "🚨 Major version bump detected"
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "$COMMIT_MSG" =~ \[minor\]|\[feature\]|feat: ]]; then
            echo "✨ Minor version bump detected"
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            echo "🔧 Patch version bump (default)"
            PATCH=$((PATCH + 1))
          fi

          # Create version string
          VERSION="$MAJOR.$MINOR.$PATCH"
          TAG_NAME="v$VERSION"

          # Output version information
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT

          echo "📦 Previous version: $LATEST_VERSION"
          echo "🚀 New version: $VERSION"
          echo "📝 Commit message: $COMMIT_MSG"

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy-prod
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: Assign Custom Domain (if configured)
        run: |
          if [ ! -z "${{ secrets.CUSTOM_DOMAIN }}" ]; then
            vercel domains add ${{ secrets.CUSTOM_DOMAIN }} --token=${{ secrets.VERCEL_TOKEN }}
          fi

      - name: Create GitHub Release
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            // Get commit messages since last release
            let changelog = '';
            try {
              const { data: commits } = await github.rest.repos.compareCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                base: '${{ steps.version.outputs.latest_version }}' || 'HEAD~10',
                head: context.sha
              });

              // Generate changelog
              changelog = commits.commits.map(commit => 
                `- ${commit.commit.message.split('\n')[0]} (${commit.sha.slice(0,7)})`
              ).join('\n');
            } catch (error) {
              console.log('Could not generate changelog:', error.message);
              changelog = '- Initial release or changelog generation failed';
            }

            // Create release body
            const releaseBody = `🚀 **Production Release v${{ steps.version.outputs.version }}**

            ## 🌟 What's New
            ${changelog}

            ## � Links
            - **Production URL**: ${{ steps.deploy-prod.outputs.deployment_url }}
            - **Commit**: ${context.sha}
            - **Build**: [GitHub Actions Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ## 📊 Deployment Info
            - **Environment**: Production
            - **Branch**: ${context.ref.replace('refs/heads/', '')}
            - **Deployed at**: ${new Date().toISOString()}
            - **Deployed by**: @${context.actor}

            ---
            *This release was automatically created by GitHub Actions*`;

            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ steps.version.outputs.tag_name }}',
              name: `Release v${{ steps.version.outputs.version }}`,
              body: releaseBody,
              draft: false,
              prerelease: false,
              generate_release_notes: true
            });

            console.log(`✅ Release created: ${release.html_url}`);
            console.log(`📦 Version: ${{ steps.version.outputs.version }}`);
            console.log(`🏷️ Tag: ${{ steps.version.outputs.tag_name }}`);

      - name: Notify Deployment Success
        if: success()
        run: |
          echo "🎉 Production deployment completed successfully!"
          echo "🌐 Production URL: ${{ steps.deploy-prod.outputs.deployment_url }}"
          echo "🏷️ Version: ${{ steps.version.outputs.tag_name }}"
          echo "📦 Release: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag_name }}"

  # Required status check job that must pass for PR merge
  check-requirements:
    runs-on: ubuntu-latest
    name: ✅ Check Requirements
    needs: [lint-and-test]
    if: always()

    steps:
      - name: Check if all required jobs passed
        run: |
          if [ "${{ needs.lint-and-test.result }}" != "success" ]; then
            echo "❌ Required checks failed. Cannot merge PR."
            exit 1
          else
            echo "✅ All required checks passed. PR can be merged."
          fi
