name: Deploy Next.js to Vercel

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    name: üîç Lint and Test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npm run format:check

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

      - name: Set status check for PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              context: 'ci/lint-and-test',
              description: 'All checks passed'
            });

  deploy-preview:
    needs: lint-and-test
    runs-on: ubuntu-latest
    name: üöÄ Deploy Preview
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: Comment PR with preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üöÄ **Preview deployment ready!**\n\n‚úÖ Preview URL: ${{ steps.deploy.outputs.deployment_url }}\n\nThis preview will update automatically when you push new commits to this PR.'
            })

  deploy-production:
    needs: lint-and-test
    runs-on: ubuntu-latest
    name: üöÄ Deploy Production
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy-prod
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: Assign Custom Domain (if configured)
        run: |
          if [ ! -z "${{ secrets.CUSTOM_DOMAIN }}" ]; then
            vercel domains add ${{ secrets.CUSTOM_DOMAIN }} --token=${{ secrets.VERCEL_TOKEN }}
          fi

      - name: Auto-increment patch version and create GitHub Release
  if: success()
  uses: actions/github-script@v7
  with:
    script: |
      // ‡∏î‡∏∂‡∏á tag ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      const { data: tags } = await github.rest.repos.listTags({
        owner: context.repo.owner,
        repo: context.repo.repo,
        per_page: 1
      });

      let latestTag = tags.length > 0 ? tags[0].name : 'v0.0.0';
      console.log(`Latest tag: ${latestTag}`);

      // ‡πÅ‡∏õ‡∏•‡∏á tag ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç version
      const versionMatch = latestTag.match(/^v(\d+)\.(\d+)\.(\d+)$/);
      let major = 0, minor = 0, patch = 0;

      if (versionMatch) {
        major = parseInt(versionMatch[1], 10);
        minor = parseInt(versionMatch[2], 10);
        patch = parseInt(versionMatch[3], 10);
      }

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° patch version
      patch += 1;

      const newVersion = `v${major}.${minor}.${patch}`;
      console.log(`New version: ${newVersion}`);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Release ‡πÉ‡∏´‡∏°‡πà
      const { data: release } = await github.rest.repos.createRelease({
        owner: context.repo.owner,
        repo: context.repo.repo,
        tag_name: newVersion,
        name: `Production Release ${newVersion}`,
        body: `üöÄ **Production deployment successful!**\n\n‚úÖ Deployment URL: ${{ steps.deploy-prod.outputs.deployment_url }}\n\nüì¶ Commit: ${context.sha}`,
        draft: false,
        prerelease: false
      });

      console.log(`Release created: ${release.html_url}`);

  # Required status check job that must pass for PR merge
  check-requirements:
    runs-on: ubuntu-latest
    name: ‚úÖ Check Requirements
    needs: [lint-and-test]
    if: always()

    steps:
      - name: Check if all required jobs passed
        run: |
          if [ "${{ needs.lint-and-test.result }}" != "success" ]; then
            echo "‚ùå Required checks failed. Cannot merge PR."
            exit 1
          else
            echo "‚úÖ All required checks passed. PR can be merged."
          fi
